apiVersion: batch/v1
kind: Job
metadata:
  name: aim-engine-recipe-selector-hook
  namespace: aim-engine
  labels:
    app: aim-engine
    component: recipe-selector
spec:
  template:
    spec:
      serviceAccountName: aim-engine
      containers:
      - name: recipe-selector
        image: aim-vllm:latest
        imagePullPolicy: IfNotPresent
        
        # Recipe selection with mock data for Minikube
        command: ["python3", "-c"]
        args:
        - |
          import os
          import json
          import sys
          from pathlib import Path
          
          # Mock recipe selection for Minikube development
          print("üéØ Starting recipe selection for Minikube...")
          
          # Default configuration for development
          model_id = os.environ.get('MODEL_ID', 'microsoft/DialoGPT-medium')  # Smaller model for TGI
          gpu_count = os.environ.get('GPU_COUNT', '1')  # Minikube typically has limited resources
          precision = os.environ.get('PRECISION', 'float16')  # TGI compatible precision
          backend = os.environ.get('BACKEND', 'tgi')
          
          # Create mock recipe configuration
          recipe_config = {
              "RECIPE_ID": f"{model_id.replace('/', '-').lower()}-{gpu_count}gpu-{precision}",
              "GPU_COUNT": gpu_count,
              "PRECISION": precision,
              "MODEL_ID": model_id,
              "BACKEND": backend,
              "REQUIRED_MEMORY_GB": str(int(gpu_count) * 4),  # 4GB per GPU for TGI
              "REQUIRED_CPU_CORES": str(int(gpu_count) * 2),  # 2 CPU per GPU for TGI
              "TGI_ARG_MODEL_ID": model_id,
              "TGI_ARG_DTYPE": precision,
              "TGI_ARG_PORT": "8000",
              "TGI_ARG_HOSTNAME": "0.0.0.0",
              "TGI_ARG_MAX_BATCH_TOTAL_TOKENS": "8192",
              "TGI_ARG_MAX_BATCH_PREFILL_TOKENS": "4096",
              "TGI_ARG_MAX_INPUT_LENGTH": "4096",
              "TGI_ARG_MAX_TOTAL_TOKENS": "8192"
          }
          
          print(f"üìã Selected Recipe Configuration:")
          print(f"   Recipe ID: {recipe_config['RECIPE_ID']}")
          print(f"   Model: {recipe_config['MODEL_ID']}")
          print(f"   GPU Count: {recipe_config['GPU_COUNT']}")
          print(f"   Precision: {recipe_config['PRECISION']}")
          print(f"   Backend: {recipe_config['BACKEND']}")
          
          # Create ConfigMap for recipe configuration
          configmap_yaml = f"""apiVersion: v1
kind: ConfigMap
metadata:
  name: aim-engine-recipe-config
  namespace: aim-engine
  labels:
    app: aim-engine
    component: recipe-config
data:
"""
          
          for key, value in recipe_config.items():
              configmap_yaml += f'  {key}: "{value}"\n'
          
          # Write ConfigMap to file
          with open('/tmp/recipe-config.yaml', 'w') as f:
              f.write(configmap_yaml)
          
          # Apply ConfigMap
          import subprocess
          try:
              result = subprocess.run(['kubectl', 'apply', '-f', '/tmp/recipe-config.yaml'], 
                                    capture_output=True, text=True, check=True)
              print(f"‚úÖ Recipe ConfigMap created: {result.stdout.strip()}")
          except subprocess.CalledProcessError as e:
              print(f"‚ùå Failed to create ConfigMap: {e.stderr}")
              sys.exit(1)
          
          # Create kubeconfig secret for init container
          kubeconfig_secret = """apiVersion: v1
kind: Secret
metadata:
  name: aim-engine-kubeconfig
  namespace: aim-engine
  labels:
    app: aim-engine
    component: kubeconfig
type: Opaque
data:
  config: """ + subprocess.run(['kubectl', 'config', 'view', '--raw', '--minify', '--flatten'], 
                              capture_output=True, text=True).stdout.encode('base64').decode().strip() + "\n"
          
          with open('/tmp/kubeconfig-secret.yaml', 'w') as f:
              f.write(kubeconfig_secret)
          
          try:
              result = subprocess.run(['kubectl', 'apply', '-f', '/tmp/kubeconfig-secret.yaml'], 
                                    capture_output=True, text=True, check=True)
              print(f"‚úÖ Kubeconfig secret created: {result.stdout.strip()}")
          except subprocess.CalledProcessError as e:
              print(f"‚ùå Failed to create kubeconfig secret: {e.stderr}")
              sys.exit(1)
          
          print("üéâ Recipe selection completed successfully!")
          print(f"üìä Configuration saved to ConfigMap: aim-engine-recipe-config")
        
        env:
        - name: MODEL_ID
          value: "microsoft/DialoGPT-medium"
        - name: GPU_COUNT
          value: "1"
        - name: PRECISION
          value: "float16"
        - name: BACKEND
          value: "tgi"
        - name: PYTHONUNBUFFERED
          value: "1"
        
        # Resource requirements for recipe selection
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Volume mounts for recipes and output
        volumeMounts:
        - name: recipes
          mountPath: /workspace/aim-engine/recipes
        - name: recipe-output
          mountPath: /tmp
      
      volumes:
      - name: recipes
        configMap:
          name: aim-engine-recipes
      - name: recipe-output
        emptyDir: {}
      
      restartPolicy: Never
      backoffLimit: 3 