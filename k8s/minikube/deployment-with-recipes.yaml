apiVersion: apps/v1
kind: Deployment
metadata:
  name: aim-engine
  namespace: aim-engine
  labels:
    app: aim-engine
    version: v1
    component: deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aim-engine
  template:
    metadata:
      labels:
        app: aim-engine
        version: v1
        component: deployment
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Security context for development
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      
      # Wait for recipe selection to complete
      initContainers:
      - name: recipe-wait
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for recipe selection to complete..."
          while ! kubectl get job aim-engine-recipe-selector-hook -o jsonpath='{.status.succeeded}' | grep -q "1"; do
            echo "Recipe selection job not completed yet, waiting..."
            sleep 10
          done
          echo "Recipe selection completed!"
        env:
        - name: KUBECONFIG
          value: "/root/.kube/config"
        volumeMounts:
        - name: kubeconfig
          mountPath: /root/.kube
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: kubeconfig
        secret:
          secretName: aim-engine-kubeconfig
          defaultMode: 0400
      
      containers:
      - name: aim-engine
        image: aim-vllm:latest
        imagePullPolicy: IfNotPresent
        
        # Port configuration
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8000
          protocol: TCP
        
        # Environment variables from ConfigMap
        env:
        - name: AIM_CACHE_DIR
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: aim_cache_dir
        - name: AIM_CACHE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: aim_cache_enabled
        - name: HF_HOME
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: hf_home
        - name: TRANSFORMERS_CACHE
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: transformers_cache
        - name: HF_DATASETS_CACHE
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: hf_datasets_cache
        - name: VLLM_CACHE_DIR
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: vllm_cache_dir
        - name: HF_HUB_DISABLE_TELEMETRY
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: hf_hub_disable_telemetry
        - name: HIP_VISIBLE_DEVICES
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: hip_visible_devices
        - name: PYTORCH_ROCM_ARCH
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: pytorch_rocm_arch
        - name: VLLM_USE_ROCM
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: vllm_use_rocm
        - name: PYTORCH_CUDA_ALLOC_CONF
          valueFrom:
            configMapKeyRef:
              name: aim-engine-config
              key: pytorch_cuda_alloc_conf
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: ENVIRONMENT
          value: "development"
        - name: LOG_LEVEL
          value: "DEBUG"
        # Recipe selection environment variables
        - name: RECIPE_ID
          valueFrom:
            configMapKeyRef:
              name: aim-engine-recipe-config
              key: RECIPE_ID
              optional: true
        - name: GPU_COUNT
          valueFrom:
            configMapKeyRef:
              name: aim-engine-recipe-config
              key: GPU_COUNT
              optional: true
        - name: PRECISION
          valueFrom:
            configMapKeyRef:
              name: aim-engine-recipe-config
              key: PRECISION
              optional: true
        - name: MODEL_ID
          valueFrom:
            configMapKeyRef:
              name: aim-engine-recipe-config
              key: MODEL_ID
              optional: true
        
        # Reduced resource limits for Minikube (will be overridden by recipe if available)
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        
        # Volume mounts
        volumeMounts:
        - name: model-cache
          mountPath: /workspace/model-cache
        - name: recipes
          mountPath: /workspace/aim-engine/recipes
          readOnly: true
        
        # Health checks for HTTP server
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Command to start the service (will be overridden by recipe if available)
        command: ["python3"]
        args: 
        - "-c"
        - |
          import os
          import sys
          import json
          from pathlib import Path
          
          # Check if recipe configuration is available
          recipe_id = os.environ.get('RECIPE_ID')
          gpu_count = os.environ.get('GPU_COUNT')
          precision = os.environ.get('PRECISION')
          model_id = os.environ.get('MODEL_ID')
          
          if recipe_id and gpu_count and precision and model_id:
              print(f"🎯 Starting AIM Engine with recipe: {recipe_id}")
              print(f"   Model: {model_id}")
              print(f"   GPUs: {gpu_count}")
              print(f"   Precision: {precision}")
              
              # Start mock vLLM server with recipe info
              from http.server import HTTPServer, BaseHTTPRequestHandler
              import threading
              import time
              
              class AIMEngineHandler(BaseHTTPRequestHandler):
                  def do_GET(self):
                      if self.path == '/':
                          self.send_response(200)
                          self.send_header('Content-type', 'text/html')
                          self.end_headers()
                          
                          html = f"""
                          <html>
                          <head><title>AIM Engine - Minikube</title></head>
                          <body>
                              <h1>🚀 AIM Engine Running</h1>
                              <h2>Recipe Configuration:</h2>
                              <ul>
                                  <li><strong>Recipe ID:</strong> {recipe_id}</li>
                                  <li><strong>Model:</strong> {model_id}</li>
                                  <li><strong>GPU Count:</strong> {gpu_count}</li>
                                  <li><strong>Precision:</strong> {precision}</li>
                                  <li><strong>Environment:</strong> Development (Minikube)</li>
                              </ul>
                              <h2>Endpoints:</h2>
                              <ul>
                                  <li><a href="/metrics">Metrics</a></li>
                                  <li><a href="/health">Health Check</a></li>
                                  <li><a href="/recipe">Recipe Info</a></li>
                              </ul>
                          </body>
                          </html>
                          """
                          self.wfile.write(html.encode())
                          
                      elif self.path == '/metrics':
                          self.send_response(200)
                          self.send_header('Content-type', 'text/plain')
                          self.end_headers()
                          
                          metrics = f"""
# HELP aim_recipe_selection_total Total number of recipe selections
# TYPE aim_recipe_selection_total counter
aim_recipe_selection_total{{recipe_id="{recipe_id}",model="{model_id}",gpu_count="{gpu_count}",precision="{precision}"}} 1

# HELP aim_performance_tokens_per_second Tokens per second (mock)
# TYPE aim_performance_tokens_per_second gauge
aim_performance_tokens_per_second{{recipe_id="{recipe_id}"}} 150.5

# HELP aim_gpu_memory_utilization GPU memory utilization (mock)
# TYPE aim_gpu_memory_utilization gauge
aim_gpu_memory_utilization{{recipe_id="{recipe_id}"}} 0.75

# HELP aim_engine_requests_total Total requests to AIM Engine
# TYPE aim_engine_requests_total counter
aim_engine_requests_total{{endpoint="/"}} 1
                          """
                          self.wfile.write(metrics.encode())
                          
                      elif self.path == '/health':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          
                          health = {
                              "status": "healthy",
                              "recipe_id": recipe_id,
                              "model_id": model_id,
                              "gpu_count": gpu_count,
                              "precision": precision,
                              "environment": "development"
                          }
                          self.wfile.write(json.dumps(health).encode())
                          
                      elif self.path == '/recipe':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          
                          recipe_info = {
                              "recipe_id": recipe_id,
                              "model_id": model_id,
                              "gpu_count": int(gpu_count),
                              "precision": precision,
                              "environment": "development",
                              "backend": "vllm",
                              "config": {
                                  "args": {
                                      "model": model_id,
                                      "dtype": precision,
                                      "tensor_parallel_size": gpu_count,
                                      "max_model_len": 32768,
                                      "gpu_memory_utilization": 0.9
                                  }
                              }
                          }
                          self.wfile.write(json.dumps(recipe_info, indent=2).encode())
                          
                      else:
                          self.send_response(404)
                          self.end_headers()
                          self.wfile.write(b"Not Found")
                  
                  def log_message(self, format, *args):
                      # Suppress access logs
                      pass
              
              # Start server
              server = HTTPServer(('0.0.0.0', 8000), AIMEngineHandler)
              print(f"🌐 AIM Engine server started on port 8000")
              print(f"📊 Metrics available at: http://localhost:8000/metrics")
              server.serve_forever()
          else:
              print("⚠️  No recipe configuration found, starting basic server")
              # Fallback to basic HTTP server
              import http.server
              import socketserver
              
              class BasicHandler(http.server.SimpleHTTPRequestHandler):
                  def do_GET(self):
                      if self.path == '/':
                          self.send_response(200)
                          self.send_header('Content-type', 'text/html')
                          self.end_headers()
                          
                          html = """
                          <html>
                          <head><title>AIM Engine - Minikube (Basic)</title></head>
                          <body>
                              <h1>🚀 AIM Engine Running (Basic Mode)</h1>
                              <p>No recipe configuration available. This is a basic development server.</p>
                              <p><a href="/metrics">Metrics</a></p>
                          </body>
                          </html>
                          """
                          self.wfile.write(html.encode())
                      elif self.path == '/metrics':
                          self.send_response(200)
                          self.send_header('Content-type', 'text/plain')
                          self.end_headers()
                          self.wfile.write(b"# No metrics available in basic mode\n")
                      else:
                          super().do_GET()
              
              with socketserver.TCPServer(("", 8000), BasicHandler) as httpd:
                  print("🌐 Basic AIM Engine server started on port 8000")
                  httpd.serve_forever()
      
      # Volumes
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: aim-engine-cache-pvc
      - name: recipes
        configMap:
          name: aim-engine-recipes
      
      # Restart policy
      restartPolicy: Always 